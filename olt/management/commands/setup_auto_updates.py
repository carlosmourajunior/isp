"""
Comando Django para configurar agendamentos autom√°ticos de atualiza√ß√£o.
Este comando usa APScheduler para agendar tarefas peri√≥dicas.
"""
from django.core.management.base import BaseCommand
from olt.scheduler import start_scheduler, stop_scheduler, get_scheduler_status
import logging


class Command(BaseCommand):
    help = 'Configura agendamentos autom√°ticos para atualiza√ß√µes do sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--start',
            action='store_true',
            help='Inicia o scheduler de atualiza√ß√µes autom√°ticas',
        )
        parser.add_argument(
            '--stop',
            action='store_true',
            help='Para o scheduler de atualiza√ß√µes autom√°ticas',
        )
        parser.add_argument(
            '--status',
            action='store_true',
            help='Mostra o status do scheduler',
        )

    def handle(self, *args, **options):
        if options['start']:
            self.start_auto_updates()
        elif options['stop']:
            self.stop_auto_updates()
        elif options['status']:
            self.show_status()
        else:
            self.show_help()

    def start_auto_updates(self):
        """Inicia as atualiza√ß√µes autom√°ticas"""
        try:
            start_scheduler()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Atualiza√ß√µes autom√°ticas iniciadas!')
            )
            self.stdout.write(
                '   Frequ√™ncia: A cada hora (minuto 0)'
            )
            self.stdout.write(
                '   Para verificar status: python manage.py setup_auto_updates --status'
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao iniciar atualiza√ß√µes autom√°ticas: {e}')
            )

    def stop_auto_updates(self):
        """Para as atualiza√ß√µes autom√°ticas"""
        try:
            stop_scheduler()
            self.stdout.write(
                self.style.WARNING('‚èπÔ∏è Atualiza√ß√µes autom√°ticas paradas')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao parar atualiza√ß√µes autom√°ticas: {e}')
            )

    def show_status(self):
        """Mostra o status do scheduler"""
        try:
            status = get_scheduler_status()
            
            if status['status'] == 'stopped':
                self.stdout.write(
                    self.style.WARNING('‚èπÔ∏è Scheduler parado')
                )
            elif status['status'] == 'not_running':
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è Scheduler n√£o est√° rodando')
                )
            elif status['status'] == 'running':
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Scheduler rodando')
                )
                
                if status['jobs']:
                    self.stdout.write('\nüìã Jobs agendados:')
                    for job in status['jobs']:
                        next_run = job['next_run'] or 'N√£o agendado'
                        self.stdout.write(f"  ‚Ä¢ {job['name']} - Pr√≥xima execu√ß√£o: {next_run}")
                else:
                    self.stdout.write('   Nenhum job agendado')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao verificar status: {e}')
            )

    def show_help(self):
        """Mostra informa√ß√µes de ajuda"""
        self.stdout.write(
            self.style.SUCCESS('üîß Sistema de Atualiza√ß√µes Autom√°ticas')
        )
        self.stdout.write('')
        self.stdout.write('Comandos dispon√≠veis:')
        self.stdout.write('  --start   : Inicia atualiza√ß√µes autom√°ticas')
        self.stdout.write('  --stop    : Para atualiza√ß√µes autom√°ticas')
        self.stdout.write('  --status  : Mostra status atual')
        self.stdout.write('')
        self.stdout.write('Exemplo:')
        self.stdout.write('  python manage.py setup_auto_updates --start')
        self.stdout.write('')
        self.stdout.write('‚ÑπÔ∏è As atualiza√ß√µes executam a cada hora e incluem:')
        self.stdout.write('   ‚Ä¢ Atualiza√ß√£o de portas')
        self.stdout.write('   ‚Ä¢ Atualiza√ß√£o de ONUs') 
        self.stdout.write('   ‚Ä¢ Atualiza√ß√£o de MACs')
        self.stdout.write('   ‚Ä¢ Atualiza√ß√£o de clientes')
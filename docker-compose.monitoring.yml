version: '3.8'

services:
  # Aplicação principal (já existente)
  db:
    image: postgres:13
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - monitoring

  web:
    build: .
    command: python /code/manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
      - ./data/media:/code/media
      - ./data/staticfiles:/code/staticfiles
      - ./data/logs:/code/logs
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=isp.settings
    restart: unless-stopped
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/api/metrics"

  redis:
    image: redis:7.2
    command: redis-server --save 60 1 --appendonly yes --appendfsync everysec
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    networks:
      - monitoring

  rq_worker:
    build: .
    command: python /code/manage.py rqworker default
    volumes:
      - .:/code
      - ./data/media:/code/media
      - ./data/staticfiles:/code/staticfiles
      - ./data/logs:/code/logs
    depends_on:
      - redis
      - db
      - web
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=isp.settings
    restart: unless-stopped
    networks:
      - monitoring

  scheduler:
    build: .
    entrypoint: []
    command: python /code/run_scheduler.py
    volumes:
      - .:/code
      - ./data/logs:/code/logs
    depends_on:
      - redis
      - db
      - web
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=isp.settings
    restart: unless-stopped
    networks:
      - monitoring

  # Stack de Monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=Grafana2025AdminSecure
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - redis

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@db:5432/postgres?sslmode=disable
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - db

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  monitoring:
    driver: bridge
#!/usr/bin/env python
"""
Script para diagnosticar e corrigir problemas espec√≠ficos de perda de dados.
Execute este script quando houver erro "relation does not exist".
"""
import os
import django
import sys
import logging
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'isp.settings')
django.setup()

from django.db import connections, transaction
from django.core.management import call_command
from django.contrib.auth.models import User

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_database_issue():
    """Diagnostica problemas no banco de dados"""
    logger.info("üîç DIAGN√ìSTICO DO BANCO DE DADOS")
    logger.info("=" * 50)
    
    issues_found = []
    
    try:
        # 1. Verificar conex√£o b√°sica
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        logger.info(f"‚úÖ PostgreSQL conectado: {version[0]}")
        
        # 2. Verificar tabelas essenciais
        essential_tables = [
            'django_session',
            'django_content_type', 
            'django_migrations',
            'auth_user',
            'olt_clientefibraixc',
            'olt_oltslot',
            'olt_olttemperature'
        ]
        
        logger.info("\nüìã Verificando tabelas essenciais:")
        for table in essential_tables:
            cursor.execute(f"SELECT to_regclass('{table}')")
            result = cursor.fetchone()
            if result[0] is None:
                logger.error(f"‚ùå AUSENTE: {table}")
                issues_found.append(f"Tabela ausente: {table}")
            else:
                # Verificar se tem dados
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                logger.info(f"‚úÖ {table}: {count} registros")
                
                if table in ['olt_clientefibraixc', 'olt_oltslot', 'olt_olttemperature'] and count == 0:
                    issues_found.append(f"Tabela {table} est√° vazia")
        
        # 3. Verificar √≠ndices
        logger.info("\nüîç Verificando √≠ndices:")
        cursor.execute("""
            SELECT schemaname, tablename, indexname 
            FROM pg_indexes 
            WHERE schemaname = 'public' 
            AND tablename IN ('django_session', 'olt_clientefibraixc', 'olt_oltslot')
        """)
        indexes = cursor.fetchall()
        logger.info(f"‚úÖ Encontrados {len(indexes)} √≠ndices")
        
        # 4. Verificar processos bloqueantes
        logger.info("\nüîí Verificando locks/bloqueios:")
        cursor.execute("""
            SELECT pid, usename, application_name, client_addr, state, query_start, query
            FROM pg_stat_activity 
            WHERE state != 'idle' AND pid != pg_backend_pid()
        """)
        active_queries = cursor.fetchall()
        logger.info(f"üìä {len(active_queries)} consultas ativas")
        
        for query in active_queries:
            if query[6] and len(query[6]) > 100:
                logger.info(f"  PID {query[0]}: {query[6][:100]}...")
            
        # 5. Verificar configura√ß√µes de pool
        logger.info("\n‚öôÔ∏è Configura√ß√µes de conex√£o:")
        from django.conf import settings
        db_config = settings.DATABASES['default']
        logger.info(f"  CONN_MAX_AGE: {db_config.get('CONN_MAX_AGE', 'n√£o definido')}")
        logger.info(f"  HOST: {db_config.get('HOST')}")
        logger.info(f"  OPTIONS: {db_config.get('OPTIONS', {})}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante diagn√≥stico: {e}")
        issues_found.append(f"Erro de conex√£o: {str(e)}")
    
    return issues_found

def fix_migration_issues():
    """Corrige problemas de migra√ß√£o"""
    logger.info("\nüîß CORRE√á√ÉO DE MIGRA√á√ïES")
    logger.info("=" * 30)
    
    try:
        # 1. Verificar migra√ß√µes pendentes
        from django.core.management.commands.showmigrations import Command as ShowMigrationsCommand
        from io import StringIO
        
        logger.info("üìã Verificando migra√ß√µes pendentes...")
        call_command('showmigrations', '--plan', verbosity=0)
        
        # 2. Executar migra√ß√µes
        logger.info("üîÑ Executando migra√ß√µes...")
        call_command('migrate', verbosity=2)
        
        # 3. Criar migra√ß√µes para novos campos is_active se necess√°rio
        logger.info("üîÑ Criando migra√ß√µes para campos is_active...")
        try:
            call_command('makemigrations', 'olt', verbosity=1)
            call_command('migrate', 'olt', verbosity=1)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Aviso na cria√ß√£o de migra√ß√µes: {e}")
        
        logger.info("‚úÖ Migra√ß√µes conclu√≠das")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False

def fix_connection_pool():
    """Corrige problemas de pool de conex√µes"""
    logger.info("\nüîß CORRE√á√ÉO DE POOL DE CONEX√ïES")
    logger.info("=" * 35)
    
    try:
        # Fechar todas as conex√µes ativas
        logger.info("üîÑ Fechando conex√µes ativas...")
        for alias in connections:
            connections[alias].close()
        
        # Limpar cache de conex√µes
        logger.info("üßπ Limpando cache de conex√µes...")
        connections._connections.clear()
        
        # Testar nova conex√£o
        logger.info("üîó Testando nova conex√£o...")
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        if result[0] == 1:
            logger.info("‚úÖ Nova conex√£o estabelecida com sucesso")
            return True
        else:
            logger.error("‚ùå Falha na nova conex√£o")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao corrigir pool: {e}")
        return False

def emergency_data_recovery():
    """Tenta recupera√ß√£o de emerg√™ncia de dados"""
    logger.info("\nüö® RECUPERA√á√ÉO DE EMERG√äNCIA")
    logger.info("=" * 30)
    
    try:
        # Verificar se h√° backup autom√°tico recente
        logger.info("üîç Verificando backups dispon√≠veis...")
        
        # Verificar se as tabelas existem mas est√£o vazias
        from django.db import connection
        cursor = connection.cursor()
        
        tables_to_check = ['olt_clientefibraixc', 'olt_oltslot', 'olt_olttemperature']
        empty_tables = []
        
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                if count == 0:
                    empty_tables.append(table)
                    logger.warning(f"‚ö†Ô∏è {table} est√° vazia")
                else:
                    logger.info(f"‚úÖ {table} tem {count} registros")
            except Exception as e:
                logger.error(f"‚ùå Erro ao verificar {table}: {e}")
        
        if empty_tables:
            logger.warning(f"üö® Detectadas {len(empty_tables)} tabelas vazias!")
            logger.info("üí° Recomenda√ß√£o: Execute uma atualiza√ß√£o manual dos dados da OLT")
            
            # Sugerir comandos de recupera√ß√£o
            logger.info("\nüìù Comandos para recupera√ß√£o:")
            logger.info("1. Reiniciar o sistema:")
            logger.info("   docker-compose restart web")
            logger.info("2. Executar atualiza√ß√£o manual:")
            logger.info("   Acesse o sistema web e execute 'Atualizar Tudo'")
            logger.info("3. Verificar logs:")
            logger.info("   docker-compose logs web scheduler -f")
        
        return len(empty_tables) == 0
        
    except Exception as e:
        logger.error(f"‚ùå Erro na recupera√ß√£o: {e}")
        return False

def create_emergency_user():
    """Cria usu√°rio de emerg√™ncia se necess√°rio"""
    logger.info("\nüë§ VERIFICA√á√ÉO DE USU√ÅRIO")
    logger.info("=" * 25)
    
    try:
        if not User.objects.filter(is_superuser=True).exists():
            logger.info("üîÑ Criando superusu√°rio de emerg√™ncia...")
            User.objects.create_superuser(
                username='emergency',
                email='emergency@localhost',
                password='emergency123'
            )
            logger.info("‚úÖ Usu√°rio criado: emergency/emergency123")
        else:
            superuser = User.objects.filter(is_superuser=True).first()
            logger.info(f"‚úÖ Superusu√°rio existe: {superuser.username}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar usu√°rio: {e}")
        return False

def main():
    """Fun√ß√£o principal de diagn√≥stico e corre√ß√£o"""
    logger.info("üö® SISTEMA DE DIAGN√ìSTICO E CORRE√á√ÉO DE EMERG√äNCIA")
    logger.info("=" * 55)
    logger.info(f"Executado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    logger.info("")
    
    # 1. Diagn√≥stico
    issues = diagnose_database_issue()
    
    if issues:
        logger.warning(f"\n‚ö†Ô∏è PROBLEMAS DETECTADOS ({len(issues)}):")
        for i, issue in enumerate(issues, 1):
            logger.warning(f"  {i}. {issue}")
    else:
        logger.info("\n‚úÖ Nenhum problema cr√≠tico detectado!")
    
    # 2. Corre√ß√µes
    success_count = 0
    total_fixes = 4
    
    if fix_migration_issues():
        success_count += 1
    
    if fix_connection_pool():
        success_count += 1
    
    if emergency_data_recovery():
        success_count += 1
    
    if create_emergency_user():
        success_count += 1
    
    # Resultado final
    logger.info(f"\nüìä RESULTADO FINAL:")
    logger.info(f"‚úÖ Corre√ß√µes bem-sucedidas: {success_count}/{total_fixes}")
    
    if success_count == total_fixes:
        logger.info("üéâ Sistema corrigido com sucesso!")
        logger.info("\nüìù PR√ìXIMOS PASSOS:")
        logger.info("1. Reinicie o sistema: docker-compose restart")
        logger.info("2. Execute uma atualiza√ß√£o manual dos dados")
        logger.info("3. Monitore os logs por alguns minutos")
    else:
        logger.warning("‚ö†Ô∏è Algumas corre√ß√µes falharam. Verifique os logs acima.")
        logger.info("\nüÜò SE O PROBLEMA PERSISTIR:")
        logger.info("1. Pare o sistema: docker-compose down")
        logger.info("2. Fa√ßa backup dos dados: make backup")
        logger.info("3. Reconstrua o sistema: docker-compose up --build")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "diagnose":
            diagnose_database_issue()
        elif sys.argv[1] == "fix-pool":
            fix_connection_pool()
        elif sys.argv[1] == "migrate":
            fix_migration_issues()
        elif sys.argv[1] == "recover":
            emergency_data_recovery()
        else:
            print("Uso: python emergency_fix.py [diagnose|fix-pool|migrate|recover]")
    else:
        main()
#!/bin/bash
# TESTE DE CONFIGURA√á√ÉO SEGURA
# Verifica se os arquivos est√£o usando vari√°veis corretamente

echo "üîç VERIFICANDO CONFIGURA√á√ÉO SEGURA"
echo "=================================="

# 1. Verificar se h√° senhas hardcoded nos arquivos
echo "1. Verificando senhas hardcoded..."
if grep -r "Redis2025SecureAuth\|PgSql_2025_Sec\|Grafana2025AdminSecure" docker-compose*.yml 2>/dev/null; then
    echo "‚ùå ERRO: Ainda h√° senhas hardcoded!"
    exit 1
else
    echo "‚úÖ OK: Nenhuma senha hardcoded encontrada"
fi

# 2. Verificar se .env tem as vari√°veis necess√°rias
echo ""
echo "2. Verificando vari√°veis no .env..."
VARS=("DB_PASSWORD" "REDIS_PASSWORD" "GRAFANA_ADMIN_PASSWORD" "GRAFANA_ADMIN_USER")
for var in "${VARS[@]}"; do
    if grep -q "^$var=" .env; then
        echo "‚úÖ $var encontrado"
    else
        echo "‚ùå $var N√ÉO encontrado!"
    fi
done

# 3. Testar se docker-compose consegue ler as vari√°veis
echo ""
echo "3. Testando docker-compose config..."
if docker compose -f docker-compose.yml -f docker-compose.security.yml config > /dev/null 2>&1; then
    echo "‚úÖ Configura√ß√£o Docker v√°lida"
else
    echo "‚ùå ERRO na configura√ß√£o Docker!"
    exit 1
fi

echo ""
echo "‚úÖ Configura√ß√£o segura aplicada com sucesso!"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Testar o sistema: docker compose -f docker-compose.yml -f docker-compose.security.yml -f docker-compose.firewall.yml up -d"
echo "2. Verificar logs: docker compose logs"
echo "3. Adicionar ao Git: git add . && git commit -m 'Security: Remove hardcoded passwords'"